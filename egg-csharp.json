{
    "meta": {
        "version": "PLCN_v2",
        "update_url": null
    },
    "exported_at": "2025-09-19T10:45:32+00:00",
    "name": "C#",
    "author": "contact@velrix.net",
    "uuid": "8f85d773-3664-4194-acd1-ae55b0f54fe8",
    "description": "A modern, type-safe language from Microsoft, commonly used for enterprise applications, Unity game development, and cross-platform solutions.",
    "tags": [],
    "features": [],
    "docker_images": {
        "ghcr.io/parkervcp/yolks:dotnet_6": "ghcr.io/parkervcp/yolks:dotnet_6",
        "ghcr.io/parkervcp/yolks:dotnet_7": "ghcr.io/parkervcp/yolks:dotnet_7",
        "ghcr.io/parkervcp/yolks:dotnet_8": "ghcr.io/parkervcp/yolks:dotnet_8",
        "ghcr.io/parkervcp/yolks:dotnet_9": "ghcr.io/parkervcp/yolks:dotnet_9"
    },
    "file_denylist": [],
    "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; cd {{APP_PROJECT_DIR}}; dotnet restore; dotnet run --project {{APP_PROJECT_FILE}}",
    "config": {
        "files": "{}",
        "startup": "{\n    \"done\": [\n        \"change this text 1\",\n        \"change this text 2\"\n    ]\n}",
        "logs": "{}",
        "stop": "^^C"
    },
    "scripts": {
        "installation": {
            "script": "#!/bin/bash\r\n\r\napt update\r\napt install -y git curl jq file unzip\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## pull git js bot repo\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}'\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\nfi\r\n\r\n## install end\r\necho \"-----------------------------------------\"\r\necho \"Installation completed...\"\r\necho \"-----------------------------------------\"",
            "container": "ghcr.io/parkervcp/installers:debian",
            "entrypoint": "bash"
        }
    },
    "variables": [
        {
            "name": "Project File",
            "description": "The main project file (.csproj) to run.",
            "env_variable": "APP_PROJECT_FILE",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": 1
        },
        {
            "name": "Project Directory",
            "description": "The directory where the project file is located.",
            "env_variable": "APP_PROJECT_DIR",
            "default_value": "/home/container",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "string",
                ""
            ],
            "sort": 2
        },
        {
            "name": "Git Repository Address",
            "description": "The Git repository address to clone from.",
            "env_variable": "GIT_ADDRESS",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": 3
        },
        {
            "name": "Git Branch",
            "description": "The Git branch to clone from.",
            "env_variable": "GIT_BRANCH",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": 4
        },
        {
            "name": "Auto Update",
            "description": "Automatically pull the latest files from the Git repository on startup.",
            "env_variable": "AUTO_UPDATE",
            "default_value": "0",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "required",
                "boolean"
            ],
            "sort": 5
        },
        {
            "name": "Git Username",
            "description": "The Git username for authentication, if required.",
            "env_variable": "GIT_USERNAME",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": 6
        },
        {
            "name": "Git Access Token",
            "description": "The Git access token for authentication, if required.",
            "env_variable": "GIT_ACCESS_TOKEN",
            "default_value": "",
            "user_viewable": true,
            "user_editable": true,
            "rules": [
                "nullable",
                "string"
            ],
            "sort": 7
        }
    ]
}